[
  {
    "path": "tei/said-element/",
    "title": "`<said>` Element",
    "description": "Who says what and to whom...",
    "author": [
      {
        "name": "Mathieu Glachant",
        "url": {}
      }
    ],
    "date": "2022-10-04",
    "categories": [],
    "contents": "\n\nContents\nOrigins of This Data\nWhat Are <said> Nodes For?\nExample Nodes\n\nGet the Data\nDownload Link\nLast Updated\n\nRaw Data Generation\nXquery Script\nXML Output File\n\nData Prep\nClean: Fix Data Types and NA Values\nTidy: Separate Delimited Lists\nCopyright: Remove Raw Text\n\nEditing Progress\nData Dictionary\nbook\nchapter\npage\nline\nspeaker\naddressee\nperson\norg\nplace\nlanguage\naloud\nformat\nwords\n\n\nOrigins of This Data\nThis data is generated by extracting all TEI <said> nodes in the Digital Edition of Terra Ignota.\nWhat Are <said> Nodes For?\nThese <said> nodes contain the text of all direct communication between characters. I usually refer to such passages as a ‘line of dialog’ or ‘line’ for short.\nExample Nodes\nA line between Mycroft and Dominic would be encoded thus:\nNovel Layout\n<p>\n  <said>\"Where hast thou been, stray?\"<\/said>, Dominic snarled.\n<\/p>\nScript Layout\n<sp>\n  <speaker>Child:<\/speaker>\n  <said>\"I miss you, Mycroft.\"<\/said>\n<\/sp>\nNote that the narration part of that paragraph is always left outside of the node.\nThe data dictionary below maps each piece of information available for the line, e.g. book, chapter, and page or who is speaking, to whom, about what, etc…\nGet the Data\nThe data extracted from these <said> nodes is available as a CSV file.\nDownload Link\n\nDownload the data\nLast Updated\nThis file was last updated on 2022-10-10.\nRaw Data Generation\nThe raw data is first extracted from the <said> nodes using an Xquery script.\nXquery Script\nFor easy ingestion with the XML package in R, the script’s output has a <records> root node and one <line> node per line of dialog in the original text.\nxquery version \"3.1\";\n\ndeclare namespace tei = \"http://www.tei-c.org/ns/1.0\";\ndeclare variable $doc := doc(\"PATH_TO_TEI_FILE\");\n\n<records>\n  {for $line at $index in $doc//tei:body//tei:said\n  return \n  <line>\n    ...\n    A node per column in the output file, see below for details\n    ...\n  <\/line>}\n<\/records>\nXML Output File\nThe Xquery script outputs an XML output file of the form:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<records>\n   <line>\n      <book>1<\/book>\n      <chapter>1<\/chapter>\n      <page>13<\/page>\n      <line>1<\/line>\n      <speaker>#Mycroft<\/speaker>\n      <addressee>#reader<\/addressee>\n      <person>#reader<\/person>\n      <org>NA<\/org>\n      <place>NA<\/place>\n      <language>en-en<\/language>\n      <aloud>FALSE<\/aloud>\n      <format>novel<\/format>\n      <text>You will criticize me, reader, for ... <\/text>\n   <\/line>\n   \n   etc...\n   \n<\/records>\nData Prep\nThis XML output file must then be cleaned, tidied, and purged of content under copyright before being saved to the csv file provided above.\nClean: Fix Data Types and NA Values\nFirst, the correct data types must be set for each column and missing values set to NA. This is very easy using the XML and tidyverse packages.\n\n\nsaid <- xmlToDataFrame(xml_path) %>%\n  mutate(\n    # Column data types must be correct\n    book = as.integer(book),\n    chapter = as.integer(chapter),\n    page = as.integer(page),\n    line = as.integer(line),\n    aloud = as.logical(aloud),\n    # Missing values must be _NA_\n    speaker = na_if(speaker, \"NA\"),\n    addressee = na_if(addressee, \"NA\"),\n    person = na_if(person, \"NA\"),\n    org = na_if(org, \"NA\"),\n    place = na_if(place, \"NA\")\n  )\n\n\nNB: Luckily for you, when you read in this data as a CSV file the readr package is smart enough to correctly guess on all of this.\nTidy: Separate Delimited Lists\nSecond, any rows containing delimited lists1, e.g. a line of dialog with more than one addressee, must be2 separated into multiple rows.\n\n\nsaid <- said %>%\n  # Break space-delimited columns across multiple rows\n  separate_rows(speaker, sep = \" \") %>%\n  separate_rows(addressee, sep = \" \") %>%\n  separate_rows(person, sep = \" \") %>%\n  separate_rows(org, sep = \" \") %>%\n  separate_rows(place, sep = \" \") \n\n\nAfter this operation, the 4994 lines of dialog in the text have generated 5884 rows in the data.\nCopyright: Remove Raw Text\nLastly, before writing to the CSV file, any text under copyright is removed. This is the last chance to process that text, so let’s add a words column for the number of words in the line.\n\n\nsaid <- said %>%\n  # Proxy for word count, counting spaces as separators\n  mutate(words = str_count(text, \" \") + 1)  %>%\n  # Must not include the original text for copyright reasons\n  mutate(text = NULL)\n\n\n\n\n\nNB: If you have ideas for other columns I could generate from the text at this step, please create an issue in the tracker here, or start a new discussion here.\nEditing Progress\n\n\nChapter1\n      Progress2\n      \n        Missing Param.\n      \n    speaker\n      addressee\n    1.01\n100%\n-\n-1.02\n100%\n-\n-1.03\n100%\n-\n-1.04\n100%\n-\n-1.05\n100%\n-\n-1.06\n100%\n-\n-1.07\n100%\n-\n-1.08\n100%\n-\n-1.09\n100%\n-\n-1.10\n100%\n-\n-1.11\n100%\n-\n-1.12\n100%\n-\n-1 Chapters with at least one line edited.\n    2 Percentage of lines edited.\n    \n\nData Dictionary\nList of the columns in the data file explaining what they mean and how they were generated.\nbook\nThe number of the book which contains the line.\nRequired, numeric.\nDerived from parameter n of the <text type=\"book\"> node the line is a child of.\n<book>\n  {data($line/ancestor::tei:text[@type = \"book\"]/@n)}\n<\/book>\nchapter\nThe number of the chapter containing the line.\nRequired, numeric.\nDerived from parameter n of the <div type=\"chapter\"> node the line is a child of.\n<chapter>\n  {data($line/ancestor::tei:div[@type = \"chapter\"]/@n)}\n<\/chapter>\npage\nThe number of the page on which the line starts.\nRequired, numeric.\nDerived from parameter n of the <pb/> milestone node which precedes the line in document order.\n<page>\n  {data($line/preceding::tei:pb[1]/@n)}\n<\/page>\nline\nThe number of the actual line of dialog in the original text, unique across all four books.\nRequired, numeric.\nIf it is important to count or visualize the data by lines in the original text, the data should be nested first by the columns from speaker to place.\n<line>\n  {$index}\n<\/line>\nNB: The line value is assigned dynamically by the Xquery when the file is generated, not embedded in the text as markup. Therefore it can change between releases.\nspeaker\nThe unique identifier of the character speaking the line. Multiple speakers result in multiple rows for the same line.\nRequired, NA indicates the line needs to be edited.\nDerived from parameter who of the line’s <said> node.\n<speaker>\n  {if ($line/@who) then data($line/@who) else \"NA\"}\n<\/speaker>\nCharacter IDs\nThe identifier takes the form #Mycroft or #Carlyle. It points to a unique <person> node with the xml:id parameter set to that value.\nThose <person> nodes contain metadata about the character, e.g. names, affiliations, age, etc… and are stored outside the text in a <standoff> node within the Digital Edition’s file.\nI will, at some point, publish the list of characters as its own file and the primary key will be this identifier to permit joins.\n‘Unknown’ Characters\nIt is not always clear in the text who is speaking, e.g. when Carlyle first overhears thru Thisbe’s door in Chapter the First, or the speaker is an unnamed individual in a crowd or group, e.g. the several servicers who witness Vivien dragging Mycroft out of the gutter in Chapter the Sixth.\nFor such cases, I use generic IDs with the form #Unknown-Soldier or #Unknown-Servicer or the fallback #Unknown.\naddressee\nThe unique identifier of the character the line is being spoken to. Multiple addressees result in multiple rows for the same line.\nRequired, NA indicates the line needs to be edited.\nDerived from the parameter toWhom of the line’s <said> node.\nSee speaker for format and meaning of the identifier.\n<addressee>\n  {if ($line/@toWhom) then data($line/@toWhom) else \"NA\"}\n<\/addressee>\nAsides to the Reader\nThe text does not call out Mycroft’s asides to his gentle reader typographically. I have therefore had to make some editorial decisions when marking up those parts of the text which are typeset like narration but which I believe to be such an aside.\nThis allows me to include the conversations between Mycroft and the reader in this data, but at the cost of some personal interpretation in what does or does not make the cut.\nThe rule I’ve tried to follow is that narration that uses the second person and/or addresses the reader directly should be included. Usually I have found that once this pattern starts it persists to the end of the paragraph. Some individual cases are less clear-cut, and of course I will have made errors during the editing.\nperson\nThe unique identifier of a person mentioned by name in the line. Multiple people mentioned result in multiple rows for the same line.\nOptional, NA indicates no one was mentioned in the line.\nDerived from the ref parameter of any children <persName> nodes of the line.\nSee speaker for format and meaning of the identifier.\n<person>\n  {if ($line//tei:persName) then \n    for $name in distinct-values($line//tei:persName/@ref)\n    return normalize-space(concat($name, \" \"))\n  else \"NA\"}\n<\/person>\norg\nThe unique identifier of an organization or group mentioned by name in the line. Multiple orgs mentioned result in multiple rows for the same line.\nOptional, NA indicates no organization was mentioned in the line.\nDerived from the ref parameter of any children <orgName> nodes of the line,.\n<org>\n  {if ($line//tei:orgName)then \n    for $name in distinct-values($line//tei:orgName/@ref)\n    return normalize-space(concat($name, \" \"))\n  else \"NA\"}\n<\/org>\nOrg IDs\nThe organizations are managed much like the characters, but using <org> nodes instead of <person>. Unlike persons, orgs can nest.\nThese include Hives, bash’es, nation strats, the servicers, or the Chicago Museum of Science and Industry as well as its Junior Scientist Club.\nplace\nThe unique identifier of a place mentioned by name in the line. Multiple places mentioned result in multiple rows for the same line.\nOptional, NA indicates no place was mentioned in the line.\nDerived from the ref parameter of any children <placeName> nodes of the line.\n<place>\n  {if ($line//tei:placeName) then \n    for $name in distinct-values($line//tei:placeName/@ref)\n    return normalize-space(concat($name, \" \"))\n  else \"NA\"}\n<\/place>\nPlace IDs\nPlaces are managed much like orgs, but using <place> nodes instead of <org>.\nThese include planets, continents, cities, bash’houses, palaces, or flower trenches and they nest as well.\nlanguage\nThe ISO-code for the language the line is spoken in.\nRequired, but the output file defaults to en-en since Mycroft’s typographic conventions allowed a programmatic approach to setting the attribute in the text.\nDerived from the xml:lang parameter of the line’s <said> node.\nNote that this is not the language of the line in the text itself, since Mycroft takes it upon himself to translate most of the dialog into English.\n<language>\n  {if ($line/@xml:lang) then data($line/@xml:lang) else \"en-en\"}\n<\/language>\nFuture ISO Language Codes\nSeveral of the languages used are future invented variants of current ones. In that spirit, I have created fictitious ISO codes for this parameter:\nen-ar: archaic English, as used by the reader and Dominic,\nsp-hu: Humanist Spanish,\njp-mi: Mitsubishi Japanese, on the premise that Ando makes little distinction between voting bloc and nation-strat,\nfr-eu: European French, just to piss of Ganymede,\nen-tx: the uncapitalized unpunctuated form of text only english used by eureka weeksbooth\nla-ma: Masonic neo-latin.\nOthers to come as they appear in the text, such as Ute-Speak as a dialect of English.\nNon-English Languages in the Text\nI have used the <foreign xml:lang=\"fr-eu\"> element to wrap text that is actually given in a language other than English but I am not including this information in this data file. Create a feature request on the project GitHub repository if you’d like me to revisit that decision.\naloud\nA boolean indicating whether the line is spoken aloud or not. Takes the value FALSE when texting or between Mycroft and the reader, for example.\nRequired, but the file defaults to TRUE when the attribute has not been set in the text.\nDerived from the aloud parameter of the line’s <said> node.\n<aloud>\n  {if ($line[@aloud=\"false\"]) then \"FALSE\" else \"TRUE\"}\n<\/aloud>\nformat\nThe style in which the dialog is rendered in the text. Takes the value script when the layout changes to a script-like format with the speaker’s name repeated at each line, and novel otherwise.\nRequired, NA indicates a <said> element which does not match the criteria below.\nSet to script when the ancestor of the line just below the chapter <div> level is an <sp> node, and to novel otherwise.\n<format>\n  {if ($line/ancestor::tei:sp) then \"script\" else \"novel\"}\n<\/format>\nwords\nThe number of words in the line.\nRequired, numeric.\nDerived during data cleaning by counting the normalized spaces in the text column, plus one.\n<text>\n  {normalize-space(data($line))}\n<\/text>\nNB: If you have ideas for other columns I could generate from the text without infringing on the author’s copyright, please create an issue in the tracker here, or start a new discussion here.\n\nIn the XML output the lists were space-delimited, since they derived from XML node parameters.↩︎\nIn order to be Tidy Data, in which each row represents a single observation.↩︎\n",
    "preview": {},
    "last_modified": "2022-10-10T13:54:40-04:00",
    "input_file": {}
  },
  {
    "path": "tei/tei-structure/",
    "title": "TEI - High Level Structure",
    "description": "A map of where all this data comes from...",
    "author": [
      {
        "name": "Mathieu Glachant",
        "url": {}
      }
    ],
    "date": "2022-10-02",
    "categories": [],
    "contents": "\n\nContents\nStructure of a TEI Edition\nMetadata and Text (Required)\nStandoff (Optional)\n\nSeries As One File\nSeries vs. Novels\nContents of a Novel\n\nPutting It Together\nHigh-Level Structure\n\n\nStructure of a TEI Edition\nThis project rests on a personal digital edition of the Terra Ignota series. All of the analyses use data that ultimately come from a single file containing the text of all four books marked up in a dialect of XML called TEI1.\nThis article explains the high-level structure of that file and serves as an orientation for those interested in where the data lives in relation to the text itself. Other articles in this collection will drill down into specific XML elements from the TEI schema.\nMetadata and Text (Required)\nAll TEI documents must have the following structure:\n<TEI xmlns=\"http://www.tei-c.org/ns/1.0\">\n  <teiHeader>\n    Metadata about this Digital Edition\n  <\/teiHeader>\n  <text>\n    Ada Palmer's text(s)\n  <\/text>\n<\/TEI>\nThe root is a <TEI> node with a xmlns parameter that declares the schema. The metadata about the file itself goes into the required <teiHeader> element (sources, editorial and encoding decisions, change control, contributors, etc…) and the text(s) go into the aptly named <text> node.\nStandoff (Optional)\nI have also included an optional <standoff> node. This contains anything I want to add alongside the text to support my analysis, while keeping them separate:\n<TEI xmlns=\"http://www.tei-c.org/ns/1.0\">\n  <teiHeader>\n    Metadata about this Digital Edition\n  <\/teiHeader>\n  <standoff>\n    My many long lists of things, people, places, and events I'm tracking\n  <\/standoff>\n  <text>\n    Ada Palmer's text(s)\n  <\/text>\n<\/TEI>\nThis is particularly useful to create lists of <person>,<place>, <object>, or <event> nodes which I can then point to from within the text, e.g. each time a character is mentioned, I can mark that mention with a <persName> tag pointing to that character’s <person> entry in <standoff>, to disambiguate who is being referred to:\n<standoff>\n  <person xml:id=\"Mycroft\">\n    <name>Mycroft Canner<\/name>\n  <\/person>\n<\/standoff>\n<text>\n  ....\n  \"Where hast thou been, <persName ref=\"#Mycroft\">stray<\/persName>?\"\n  ....\n<\/text>\nSeries As One File\nI opted to group the four novels into a single file to simplify data retrieval and analysis across the series. I may change this later if the file just gets too cumbersome.\nSeries vs. Novels\nBecause Terra Ignota is a series, I have structured the contents of the top-level <text> node as a <group> node for the series containing a child <text> node for each novel. Each of these nodes has a a unique xml:id parameter we can query or point to.\n<text>\n  <group xml:id=\"TerraIgnota\">\n    <text xml:id=\"TooLikeTheLightning\"><\/text>\n    <text xml:id=\"SevenSurrenders\"><\/text>\n    <text xml:id=\"TheWillToBattle\"><\/text>\n    <text xml:id=\"PerhapsTheStars\"><\/text>\n  <\/group>\n<\/text>\nContents of a Novel\nLastly, I have broken down each novel into different nodes for the front matter, the main body of the text, and the back matter. The <front> node contains the title page, the dedication, epigraph, and permissions, the <body> node contains the chapters, and the <back> node contains the acknowledgments, author bio, etc…\n<text xml:id=\"TooLikeTheLightning\">\n  <front>\n    Dedication\n    Permissions\n    Epigraph\n    Title Page\n  <\/front>\n  <body>\n    Chapter the First\n    Chapter the Second\n    etc...\n  <\/body>\n  <back>\n    Acknowledgments\n    Author's Bio\n    Copyright Notice\n  <\/back>\n<\/text>\nPutting It Together\nHigh-Level Structure\nPutting it all together, we get the following structure against which to run our queries to extract that sweet, sweet data:\n<TEI xmlns=\"http://www.tei-c.org/ns/1.0\">\n  <teiHeader>\n    Metadata about this Digital Edition\n  <\/teiHeader>\n  <standoff>\n    My many long lists of things, people, places, and events I'm tracking\n  <\/standoff>\n  <text>\n    <group xml:id=\"TerraIgnota\">\n      <text xml:id=\"TooLikeTheLightning\">\n        <front><\/front>\n        <body><\/body>\n        <back><\/back>\n      <\/text>\n      <text xml:id=\"SevenSurrenders\">\n        <front><\/front>\n        <body><\/body>\n        <back><\/back>\n      <\/text>\n      <text xml:id=\"TheWillToBattle\">\n        <front><\/front>\n        <body><\/body>\n        <back><\/back>\n      <\/text>\n      <text xml:id=\"PerhapsTheStars\">\n        <front><\/front>\n        <body><\/body>\n        <back><\/back>\n      <\/text>\n    <\/group>\n  <\/text>\n<\/TEI>\n\nText Encoding Initiative: https://tei-c.org/↩︎\n",
    "preview": {},
    "last_modified": "2022-10-07T10:23:36-04:00",
    "input_file": {}
  }
]
