[
  {
    "path": "viz/2022-10-11-who-talks-to-whom/",
    "title": "Who Talks to Whom?",
    "description": "A few visualizations based on the `speaker` and `addressee` columns.",
    "author": [
      {
        "name": "Mathieu Glachant",
        "url": {}
      }
    ],
    "date": "2022-10-11",
    "categories": [],
    "contents": "\n\nContents\nWho Speaks? Who Listens?\nTop Speakers\nTop Addressees\nTop Conversationalists\nDoes Anyone Hog the Conversation?\n\nWho Speaks to Whom?\nListing All the Conversations\nRadar Plots\nNetwork Graph\n\n\nOur said.csv data file contains information about who said a line of dialog, and to whom. What can we do with this data for the chapters edited to date, i.e. the first twelve?\n\n\nlibrary(tidyverse)\nlibrary(gt) # For pretty tables\nlibrary(tidygraph) # For network graphs\nlibrary(ggraph) # To plot the network graphs\n\nPATH_TO_SAID <- \"../../data/said.csv\"\n\nsaid <- read.csv(PATH_TO_SAID) %>%\n  filter(\n    book == 1,\n    chapter <= 12,\n    # Let's remove the asides to the reader from this analysis\n    speaker != \"#reader\",\n    addressee != \"#reader\",\n  )\n\n\nWho Speaks? Who Listens?\nTop Speakers\nLet’s build a list of characters with a speaking part.\nWe need to:\nremove the asides to the reader and their rants to Mycroft,\neliminate duplicate rows that are not relevant, and\nrank them by number of lines of dialog.\n\n\ntop_speakers <- said %>%\n  # Group & summarize\n  # to drop rows irrelevant to `speaker`\n  group_by(line, speaker) %>%\n  summarize(.groups = \"drop\") %>%\n  # Group & summarize \n  # to count lines spoken by character\n  group_by(character = speaker) %>%\n  summarize(speaks = n()) %>%\n  # Arrange by count\n  arrange(desc(speaks))\n\n\nHere are the top five out of 38 speakers:\n\n\ncharacter\n      speaks\n    #Carlyle\n246#Mycroft\n218#Bridger\n89#Thisbe\n80#Vivien\n77\n\nTop Addressees\nWe can do the same for characters who are directly addressed.\n\n\ntop_addressees <- said  %>%\n  # Group & summarize\n  # to drop rows irrelevant to `addressee`\n  group_by(line, addressee) %>%\n  summarize(.groups = \"drop\") %>%\n  # Group & summarize\n  # to count lines addressed to character\n  group_by(character = addressee) %>%\n  summarize(spokenTo = n()) %>%\n  # Arrange by count\n  arrange(desc(spokenTo))\n\n\nHere are the top five out of 50 addressees:\n\n\ncharacter\n      spokenTo\n    #Carlyle\n258#Mycroft\n235#Bridger\n99#Vivien\n81#Ganymede\n80\n\nTop Conversationalists\nWe can now combine the two lists using a join1 by the character column.\n\n\ncharacters <- full_join(\n  top_speakers,\n  top_addressees,\n  by = \"character\"\n)\n\n\nTables are nice and all, but this seems like a good time for a graph. Here are the top 20 out of 51 characters by lines of dialog:\n\n\n\nNo real surprise there, Carlyle and Mycroft are our two chatter boxes, even when we remove the reader from the conversation, and it falls off pretty fast after that. Another Power Law Distribution?\nDoes Anyone Hog the Conversation?\nIt looks like some characters speaks more or less than they are spoken to. Anyone stand out in particular?\n\n\n\nLooks like MASON speaks less than he is spoken to. This probably reflects how much ’splaining Ganymede and Andō have to do once he arrives on stage. At the other extreme, the Major speaks much more than he is spoken to. He can be rather intimidating, after all!\nWho Speaks to Whom?\nOk, looking at the speaker and addressee columns separately is nice, and so is comparing their totals per character… but we can do more than that, right?\nWhat happens if we look at pairs of characters speaking to each other?\nListing All the Conversations\nLet’s build a list of the pairs of speakers and addressees with at least one line of dialog. We’ll also keep track of total line and word count.\nGroup by line, words, speaker, and addressee, then\nsummarize to drop dupes relevant for other columns, and\nGroup again by speaker and addressee,\nthen summarize and calculate the line and word counts.\n\n\npair_list <- said  %>%\n  # Group & summarize\n  # to drop rows irrelevant to speaker or addressee\n  group_by(line, speaker, addressee, words) %>%\n  summarize(.groups = \"drop\") %>%\n  # Group & summarize\n  # to add line and word counts\n  group_by(speaker, addressee) %>%\n  summarize(\n    lines = n(), \n    words = sum(words), \n    .groups = \"drop\"\n  ) %>%\n  # Arrange by count\n  arrange(desc(lines))\n\n\nThat’s it, it’s that easy!\nHere are the top four directed pairs by number of lines, out of 206:\n\n\nspeaker\n      addressee\n      lines\n      words\n    #Carlyle\n#Bridger\n72\n1864#Bridger\n#Carlyle\n71\n965#Carlyle\n#Mycroft\n63\n745#Mycroft\n#Carlyle\n63\n1520\n\nNote that both conversations are balanced by line count but not by word count? It’s more like two-to-one, reflecting how one character is explaining things and answering questions for the other.\nRadar Plots\nWe can draw some radar plots showing the total word count our top four speakers direct at our top six addressees:\n\n\n\nEverybody speaks to Carlyle, but Carlyle mostly speaks to Mycroft and Bridger. Only Mycroft speaks to the outside world.\nThis works pretty well for small groups of characters but it won’t scale well to the 38 speaking parts we have so far, which is only going to grow as we add chapters.\nNetwork Graph\nWe have a list of pairs of characters engaged in dialog with a few different measures of how much dialog it was… that’s all we need to build a directed, weighted network graph, but we’ll also pass in our list of characters for convenience.\n\n\nnetwork_graph <- tbl_graph(\n  edges = pair_list,\n  nodes = characters,\n)\n\n\nThat’s all it takes to make network graph, which we can then plot various visualizations of, e.g. a hairball of characters with at least fifteen spoken lines of dialog:\n\n\n\nMycroft is the hinge between several conversations, one dominated by Carlyle currently taking place at the Saneer-Weeksbooth bash’house, another one over at Ganymede’s palace during the Renunciation Day party, and some more isolated pairs around the periphery, like Ockham and Martin or Dominic and Lesley.\n\nIf we use a full_join() any characters that are not on both lists will be kept, but with an NA for the missing count.↩︎\n",
    "preview": "viz/2022-10-11-who-talks-to-whom/who-talks-to-whom_files/figure-html5/network_plot-1.png",
    "last_modified": "2022-10-13T15:24:53-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "viz/2022-10-09-exploring-verbosity/",
    "title": "Exploring Verbosity",
    "description": "A brief look at how many words characters use per line of dialog",
    "author": [
      {
        "name": "Mathieu Glachant",
        "url": {}
      }
    ],
    "date": "2022-10-09",
    "categories": [],
    "contents": "\n\nContents\nOverall Verbosity\nVerbosity by Language\nVerbosity by Character\n\nLet’s define, for now, verbosity as the tendency to use lots of words each time a character communicates with another.\nWhat visualizations of this concept can we generate from the chapters edited to date, i.e. the first twelve?\n\n\nlibrary(tidyverse)\nlibrary(gt)\n\nPATH_TO_SAID <- \"../../data/said.csv\"\n\nsaid <- read.csv(PATH_TO_SAID) %>%\n  filter(\n    book == 1,\n    chapter <= 12\n  )\n\n\nOverall Verbosity\nTo show the distribution of lines of dialog by number of words, we can use a histogram… but we have a problem. Some lines show up more than once in the data, e.g. line 2 in which Mycroft refers by name to both himself and the reader.\n\n\nline\n      speaker\n      person\n      words\n    1\n#Mycroft\n#reader\n1562\n#Mycroft\n#reader\n1552\n#Mycroft\n#Mycroft\n1553\n#Thisbe\nNA\n34\n#Carlyle\n#Carlyle\n25\n#Thisbe\nNA\n1\n\nSo first we need to group_by() & summarize() by the line column, a pattern we’ll need to apply anytime we care about the number of times the line appears in the text.\n\n\nlines <- said %>%\n  # Group by line\n  group_by(line) %>%\n  # Summarize by line and words per line\n  summarize(words = mean(words), .groups = \"drop\") \n\n\n\n\nline\n      words\n    1\n1562\n1553\n34\n25\n1\n\nThis operation dropped 890 duplicate lines from our data.\nWe’re now ready to plot our histogram.\n\n\n\nVerbosity overall in the novels follows a classic Power Law Distribution with a fairly long tail. This is pretty standard for human communications.\nVerbosity by Language\nLet’s drill a little deeper to see if the distribution changes for different sets of lines, e.g. by the language spoken1.\nWe just group by line and language before summarizing to remove duplicate lines of dialog.\n\n\nlines_by_lang <- said  %>%\n  # Group by line AND by language\n  group_by(line, language) %>%\n  # Summarize and drop everything else except the words per line\n  summarize(words = mean(words), .groups = \"drop\")\n\n\nNote that there is only ever one language per line of dialog, so this operation does remove all duplicate lines. We’ll see later that this is not always the case.\nAlright, time to draw some violin-plots!\n\n\n\nThere’s a general trend for well-represented languages to have ‘squatter’ distributions, favoring shorter lines of dialog. This may just be an artifact of small sample size. We’d need to revisit this with a few more chapters of data available.\nAlso note how languages like Mitsubishi Japanese have a second bulge around ~50 words per line, indicating conversations may fall into two modes depending on context or participants, perhaps?\nVerbosity by Character\nLet’s look at how verbose our top chatterboxes are.\nTo start, we need a list of our top speakers, which we can build with the following steps:\nGroup & summarize by line and speaker to get one row per line and speaker,\nGroup & summarize again by speaker and keep the count, and\nArrange by count and keep the top ones.\nNote that in the first step, since some lines of dialog have multiple speakers2, there will remain duplicate lines in the data. This is what we want here, since in the following step we will group & count by speaker and we want the duplicate lines to count for their respective speakers.\n\n\ntop_speakers <- said  %>%\n  # Group by line AND by speaker to deduplicate lines\n  group_by(line, speaker) %>%\n  summarize(.groups = \"drop\") %>%\n  # Group by speaker and count\n  group_by(speaker) %>%\n  summarize(count = n()) %>%\n  # Arrange by count and keep only the top\n  arrange(desc(count)) %>%\n  head(5)\n\n\nThis gives us the 5 characters with the most lines of dialog. Now we can filter for them before we group our lines by lines and speaker so we can plot their distribution.\n\n\nlines_by_speaker <- said  %>%\n  # Filter for top speakers by number of lines\n  filter(speaker %in% top_speakers$speaker) %>%\n  # Group by line and speaker\n  group_by(line, speaker) %>%\n  summarize(words = mean(words), .groups = \"drop\")\n\n\n\n\n\nMycroft really stands out from the others. 300+ words per line of dialog? Which of the characters he speaks to could be on the receiving end of such prolixity?\nTo generate a list of characters Mycroft speaks to the most, we must:\nFilter for lines that Mycroft speaks,\nGroup & summarize by line and addressee to get one row per line and addressee,\nGroup & summarize again by addressee and keep the count, and\nArrange by count and keep the top ones..\nThe pattern should start to look familiar by now, no?\n\n\ntop_Mycroft_addressees <- said  %>%\n  # Keep just Mycroft's lines of dialog\n  filter(speaker == \"#Mycroft\") %>%\n  # Group by line AND by addressee to deduplicate lines\n  group_by(line, addressee) %>%\n  summarize(.groups = \"drop\") %>%\n  # Group by addressee and count\n  group_by(addressee) %>%\n  summarize(count = n()) %>%\n  # Arrange by count and keep only the top\n  arrange(desc(count)) %>%\n  head(5)\n\n\nThat gives us the top 5 characters Mycroft speaks to by lines of dialog. Now we can filter for them as addressees and for Mycroft as speaker before we generate our distribution plot.\n\n\nlines_by_Mycroft_addressee <- said  %>%\n  # Filter for lines between Mycroft and his top addressees\n  filter(\n    speaker == \"#Mycroft\",\n    addressee %in% top_Mycroft_addressees$addressee\n  ) %>%\n  # Groub by line and addressee\n  group_by(line, addressee) %>%\n  summarize(words = mean(words), .groups = \"drop\")\n\n\n\n\n\nAh, of course. Mycroft is much more verbose in his historical & philosophical asides to the reader. Also, notice how Mycroft’s number of words per line shows that bulge near the top when speaking to certain people? It’s particularly marked with Ando & Danaë and may explain the similar bulge we saw in the distribution for Mitsubishi Japanese.\nIn any case, how does Mycroft’s verbosity compare to the others if we exclude his asides to the reader?\n\n\nlines_by_speaker <- said  %>%\n  # Filter for top speakers by number of lines\n  # but drop the asides to the reader this time\n  filter(\n    speaker %in% top_speakers$speaker,\n    addressee != \"#reader\"\n  ) %>%\n  # Group by line and speaker\n  group_by(line, speaker) %>%\n  summarize(words = mean(words), .groups = \"drop\")\n\n\n\n\n\nMycroft is still in the top 5 but without his asides to the reader his verbosity distribution looks much more like the others’.\n\nNote this is the language Mycroft tells us the line was in before translation. This allows an apples-to-apples comparison, since the word count is always done in English.↩︎\nUsually when multiple characters cry out the same thing at the same time, and the text ascribes a single quote to all of them.↩︎\n",
    "preview": "viz/2022-10-09-exploring-verbosity/exploring-verbosity_files/figure-html5/speakers_plot_wo_reader-1.png",
    "last_modified": "2022-10-11T13:16:21-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  }
]
